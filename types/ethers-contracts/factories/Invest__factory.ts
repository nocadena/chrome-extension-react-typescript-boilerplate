/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Invest, InvestInterface } from "../Invest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "aaveDepositedDai",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "apWineDeposited",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405163095ea7b360e01b815260006004820181905260001960248301529063095ea7b3906044016020604051808303816000875af1158015610058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061007c9190610082565b506100ab565b60006020828403121561009457600080fd5b815180151581146100a457600080fd5b9392505050565b60e7806100b96000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806380bf113e146037578063aa60e406146066575b600080fd5b605460423660046083565b60016020526000908152604090205481565b60405190815260200160405180910390f35b605460713660046083565b60026020526000908152604090205481565b600060208284031215609457600080fd5b81356001600160a01b038116811460aa57600080fd5b939250505056fea2646970667358221220616801eaf4aec4a33368ec0238c6a5749097334098d33254e915583423be1fae64736f6c634300080f0033";

type InvestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InvestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Invest__factory extends ContractFactory {
  constructor(...args: InvestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Invest> {
    return super.deploy(overrides || {}) as Promise<Invest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Invest {
    return super.attach(address) as Invest;
  }
  override connect(signer: Signer): Invest__factory {
    return super.connect(signer) as Invest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InvestInterface {
    return new utils.Interface(_abi) as InvestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Invest {
    return new Contract(address, _abi, signerOrProvider) as Invest;
  }
}
