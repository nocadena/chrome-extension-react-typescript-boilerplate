/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SatelliteInterface extends utils.Interface {
  functions: {
    "aaveDepositedDai(address)": FunctionFragment;
    "getInvestedApwine()": FunctionFragment;
    "getInvestedLido()": FunctionFragment;
    "investApwine(uint256)": FunctionFragment;
    "investLido(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aaveDepositedDai"
      | "getInvestedApwine"
      | "getInvestedLido"
      | "investApwine"
      | "investLido"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aaveDepositedDai",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestedApwine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestedLido",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investApwine",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "investLido",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "aaveDepositedDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestedApwine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestedLido",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investApwine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investLido", data: BytesLike): Result;

  events: {
    "InvestedLido(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InvestedLido"): EventFragment;
}

export interface InvestedLidoEventObject {
  arg0: BigNumber;
}
export type InvestedLidoEvent = TypedEvent<
  [BigNumber],
  InvestedLidoEventObject
>;

export type InvestedLidoEventFilter = TypedEventFilter<InvestedLidoEvent>;

export interface Satellite extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SatelliteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aaveDepositedDai(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInvestedApwine(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInvestedLido(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investApwine(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investLido(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  aaveDepositedDai(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInvestedApwine(overrides?: CallOverrides): Promise<BigNumber>;

  getInvestedLido(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investApwine(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investLido(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aaveDepositedDai(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedApwine(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestedLido(overrides?: CallOverrides): Promise<BigNumber>;

    investApwine(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    investLido(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InvestedLido(uint256)"(arg0?: null): InvestedLidoEventFilter;
    InvestedLido(arg0?: null): InvestedLidoEventFilter;
  };

  estimateGas: {
    aaveDepositedDai(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestedApwine(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestedLido(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investApwine(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investLido(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveDepositedDai(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestedApwine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvestedLido(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investApwine(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investLido(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
