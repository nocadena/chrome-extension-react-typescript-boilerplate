/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Test, TestInterface } from "../../test.s.sol/Test";

const _abi = [
  {
    inputs: [],
    name: "IS_SCRIPT",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "run",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vm",
    outputs: [
      {
        internalType: "contract Vm",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805460ff191660019081179091556004805461ffff1916909117905534801561002e57600080fd5b506107c98061003e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633a76846314610046578063c04062261461007e578063f8ccbf4714610088575b600080fd5b610061737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100866100a5565b005b6000546100959060ff1681565b6040519015158152602001610075565b60006100ce600160405180604001604052806004815260200163636f726560e01b81525061032a565b9050600061010160026040518060400160405280600c81526020016b31b7b6b6bab734b1b0ba37b960a11b81525061032a565b90507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561016757600080fd5b505af115801561017b573d6000803e3d6000fd5b50505050816001600160a01b031663a66e77976040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101ba57600080fd5b505af11580156101ce573d6000803e3d6000fd5b5050604051630f9db3b160e31b815267016345785d8a000060048201526001600160a01b0385169250637ced9d889150602401600060405180830381600087803b15801561021b57600080fd5b505af115801561022f573d6000803e3d6000fd5b505060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d93506376eadd369250600480830192600092919082900301818387803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b5050604080516389f4b31760e01b81526004810191909152600360448201526208aa8960eb1b606482015230602482015261032692506001600160a01b03851691506389f4b317906084016020604051808303816000875af11580156102fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032191906105df565b610576565b5050565b60408051600580825260c08201909252600091829190816020015b6060815260200190600190039081610345579050509050604051806040016040528060048152602001636e6f646560e01b8152508160008151811061038c5761038c61060e565b60200260200101819052506040518060400160405280601a81526020017f7363726970742f68656c706572732f726561644a736f6e2e6a73000000000000815250816001815181106103e0576103e061060e565b60200260200101819052506040518060400160405280600f81526020016e3232b83637bcaa32b9ba173539b7b760891b815250816002815181106104265761042661060e565b602090810291909101015260405163348051d760e11b815260048101859052737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024016000604051808303816000875af1158015610483573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ab91908101906106c8565b816003815181106104be576104be61060e565b602002602001018190525082816004815181106104dd576104dd61060e565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90638916046790610522908590600401610719565b6000604051808303816000875af1158015610541573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056991908101906106c8565b6014015195945050505050565b6105bb8160405160240161058c91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b1790526105be565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000602082840312156105f157600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b8381101561063f578181015183820152602001610627565b8381111561064e576000848401525b50505050565b600067ffffffffffffffff8084111561066f5761066f6105f8565b604051601f8501601f19908116603f01168101908282118183101715610697576106976105f8565b816040528093508581528686860111156106b057600080fd5b6106be866020830187610624565b5050509392505050565b6000602082840312156106da57600080fd5b815167ffffffffffffffff8111156106f157600080fd5b8201601f8101841361070257600080fd5b61071184825160208401610654565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561078657878503603f1901845281518051808752610767818989018a8501610624565b601f01601f191695909501860194509285019290850190600101610740565b509297965050505050505056fea26469706673582212200c4e613ee00e09d06e4040df9ef445cdb3b04367af5ea7a7f499803701bfd33d64736f6c634300080f0033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
